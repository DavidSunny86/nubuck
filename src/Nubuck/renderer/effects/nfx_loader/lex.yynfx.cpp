#line 2 "lex.yynfx.cpp"

#line 4 "lex.yynfx.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yynfx_create_buffer
#define yy_delete_buffer yynfx_delete_buffer
#define yy_flex_debug yynfx_flex_debug
#define yy_init_buffer yynfx_init_buffer
#define yy_flush_buffer yynfx_flush_buffer
#define yy_load_buffer_state yynfx_load_buffer_state
#define yy_switch_to_buffer yynfx_switch_to_buffer
#define yyin yynfxin
#define yyleng yynfxleng
#define yylex yynfxlex
#define yylineno yynfxlineno
#define yyout yynfxout
#define yyrestart yynfxrestart
#define yytext yynfxtext
#define yywrap yynfxwrap
#define yyalloc yynfxalloc
#define yyrealloc yynfxrealloc
#define yyfree yynfxfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yynfxrestart(yynfxin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yynfxleng;

extern FILE *yynfxin, *yynfxout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yynfxlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yynfxlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yynfxleng; ++yyl )\
                    if ( yynfxtext[yyl] == '\n' )\
                        --yynfxlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yynfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yynfxtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yynfxrestart()), so that the user can continue scanning by
	 * just pointing yynfxin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yynfxtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yynfxleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yynfxwrap()'s to do buffer switches
 * instead of setting up a fresh yynfxin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yynfxrestart (FILE *input_file  );
void yynfx_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yynfx_create_buffer (FILE *file,int size  );
void yynfx_delete_buffer (YY_BUFFER_STATE b  );
void yynfx_flush_buffer (YY_BUFFER_STATE b  );
void yynfxpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yynfxpop_buffer_state (void );

static void yynfxensure_buffer_stack (void );
static void yynfx_load_buffer_state (void );
static void yynfx_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yynfx_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yynfx_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yynfx_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yynfx_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yynfxalloc (yy_size_t  );
void *yynfxrealloc (void *,yy_size_t  );
void yynfxfree (void *  );

#define yy_new_buffer yynfx_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yynfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yynfx_create_buffer(yynfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yynfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yynfx_create_buffer(yynfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yynfxwrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yynfxin = (FILE *) 0, *yynfxout = (FILE *) 0;

typedef int yy_state_type;

extern int yynfxlineno;

int yynfxlineno = 1;

extern char *yynfxtext;
#define yytext_ptr yynfxtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yynfxtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yynfxleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[341] =
    {   0,
        0,    0,    2,    2,   45,   26,    6,    6,   10,   26,
       11,   26,   22,    7,   12,   19,   19,   19,   19,   19,
       19,   19,    8,    9,    2,    2,    2,    3,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    6,    0,   24,   22,    1,    0,    0,
       22,   19,   19,   16,   13,   17,   19,   19,   15,    2,
        2,    2,    2,    3,    3,    4,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   24,    0,
        0,    5,   23,    0,   19,   19,    2,    2,    2,    2,
        2,    2,    2,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
       19,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   19,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   25,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   35,    0,    0,    0,    0,   19,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    0,   41,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    0,    0,
        0,    0,    0,   20,   36,   18,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    0,    0,   29,   21,   40,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   27,    0,   33,    0,   43,   31,    0,
        0,    0,    0,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    0,   34,    0,    0,   42,    0,    2,

        2,    2,    2,    2,    2,    0,   30,    0,    0,    2,
        2,    2,    2,   39,    0,   37,    2,    2,    2,    0,
        2,    0,    2,    0,    2,    0,    2,    0,    2,    0,
        2,    0,    2,    0,    2,    0,    2,   38,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    7,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,   10,    1,
       11,    1,    1,    1,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   21,   35,   36,
        1,    1,    1,    1,   37,    1,   38,   21,   21,   21,

       39,   40,   41,   21,   21,   21,   42,   21,   21,   21,
       43,   44,   21,   45,   46,   47,   21,   48,   21,   49,
       50,   21,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    4,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[353] =
    {   0,
        0,   52,  104,  156,  481,  482,   10,   12,  476,  470,
      482,   11,   13,  482,  482,    0,  455,    1,  431,  438,
      432,  428,  482,  482,    0,   21,   21,   22,  464,    0,
       23,   25,    0,    0,  208,  260,   19,   20,   26,   44,
       48,    0,    0,   33,  468,  467,  461,  482,  466,  459,
       65,    0,  430,    0,    0,    0,  420,  420,    0,    0,
       36,   71,  460,   72,   73,  482,  454,   79,  453,   76,
      438,   65,  437,  436,  435,   72,   46,  434,  482,  452,
      452,  482,  445,  301,  407,  405,    0,  116,   94,  442,
      326,   78,   93,  446,  445,  425,  435,  416,  417,   61,

      101,  419,  427,  107,  417,  425,  411,  410,  422,    0,
      395,  122,  432,  412,  422,  403,  404,  117,  118,  406,
      414,  112,  404,  412,  398,  397,  409,  401,  109,  419,
      388,  407,  389,  387,  395,  391,  388,  399,  381,  107,
      380,  381,  395,  383,  395,  376,  378,  350,  384,  350,
      366,  346,  344,  349,  335,  332,  343,  325,  140,  321,
      322,  334,  321,  333,  313,  311,    6,  482,  324,  313,
      297,  321,  299,  303,  293,  311,  306,  288,  285,  294,
      293,  271,  284,  269,  289,  278,  253,    0,  290,  279,
      263,  287,  268,  271,  263,  282,  277,  260,  261,  274,

      273,  251,  264,  249,  269,  258,  119,  247,  482,  267,
      257,  263,  247,  265,  245,  246,  262,  482,  244,  244,
      245,  253,  251,  482,  482,    0,  223,    0,  243,  233,
      239,  223,  241,  221,  222,  238,    0,  220,  220,  223,
      234,  232,    0,    0,  220,  212,  215,  482,  482,  482,
      217,  223,  207,  214,  482,  204,  215,  220,  210,  202,
      205,    0,    0,    0,  207,  213,  197,  204,    0,  194,
      205,  210,  200,  482,  199,  482,  192,  482,  482,  208,
      192,  197,  184,    0,  183,    0,  176,    0,    0,  191,
      176,  183,  171,  169,  482,  171,  160,  482,  172,  164,

        0,  166,  156,    0,  168,  157,  482,  155,  172,  154,
        0,  152,  169,  482,  143,  482,    0,  142,    0,  148,
      147,  147,  146,  159,  158,  134,  117,  141,  137,  120,
      116,  109,  104,   67,   60,   21,    9,  482,    0,  482,
      362,  366,  370,   13,  374,  378,  382,  386,  390,  394,
      398,  402
    } ;

static yyconst flex_int16_t yy_def[353] =
    {   0,
      341,  341,  342,  342,  340,  340,  340,  340,  343,  340,
      340,  340,  340,  340,  340,  344,  344,  344,  344,  344,
      344,  344,  340,  340,  345,  345,  346,  347,  345,  345,
      345,  345,  345,  345,  348,  348,   36,   36,   36,   36,
       36,  345,  345,  340,  343,  340,  340,  340,  349,  340,
      340,  344,  344,  344,  344,  344,  344,  344,  344,  345,
      345,  346,  345,  347,  347,  340,  345,  350,  345,  345,
       36,   36,   36,   36,   36,   36,   36,   36,  340,  351,
      349,  340,  340,  340,  344,  344,  345,  352,  350,  345,
      345,   36,   36,  351,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  344,
      344,  352,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,   36,   36,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  344,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,   36,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  344,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,   36,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  344,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,   36,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  340,  340,  340,  340,  340,  340,  345,

      345,  345,  345,  345,  345,  340,  340,  340,  340,  345,
      345,  345,  345,  340,  340,  340,  345,  345,  345,  340,
      345,  340,  345,  340,  345,  340,  345,  340,  345,  340,
      345,  340,  345,  340,  345,  340,  345,  340,  345,    0,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340
    } ;

static yyconst flex_int16_t yy_nxt[535] =
    {   0,
        6,    7,    8,    9,    6,   10,   11,   12,   13,   14,
       15,   44,   44,   44,   44,   48,   52,   17,   49,   50,
      339,   51,   61,   44,   63,   45,   65,   48,   71,   66,
       68,   69,  338,   70,   44,   44,    6,   61,   44,   18,
       19,   71,   71,   20,  207,   21,   54,   22,   71,   55,
       23,   24,    6,    7,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   76,   73,   75,   71,   74,   71,   17,
       71,   50,  135,   51,   87,   45,  340,   65,  337,  340,
       66,   82,   69,   81,   70,  336,   77,   71,    6,  136,
       93,   18,   19,   78,   71,   20,   82,   21,   81,   22,

       71,   91,   23,   24,   25,   26,    8,   27,   28,   29,
       30,   31,   32,   33,   34,   71,  137,   92,   94,  113,
       94,   36,  141,  128,   94,  113,   94,  160,  154,  138,
      335,   71,  142,  156,  178,  334,  179,  161,  333,  129,
       25,   71,  332,   37,   38,  155,  157,   39,  331,   40,
      167,   41,  330,  329,   42,   43,   25,   26,    8,   27,
       28,   29,   30,   31,   32,   33,   34,  198,  245,  199,
      328,  327,  326,   36,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,   25,  307,  306,   37,   38,  305,  304,   39,

      303,   40,  302,   41,  301,  300,   42,   43,   60,   60,
      299,   60,  298,   60,   60,   60,  297,   60,   60,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,   71,  273,   60,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,   60,   60,
       60,   60,  259,   60,  258,   60,   60,   60,  257,   60,
       60,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,   72,  244,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,   60,  231,  230,  229,

      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
       60,   60,   96,   97,  218,   98,   99,  100,  101,  217,
      102,  216,  215,  103,  214,  104,  105,  213,  212,  106,
      107,  108,  211,  210,  209,  208,  109,  114,  115,  206,
      116,  117,  118,  119,  205,  120,  204,  203,  121,  202,
      122,  123,  201,  200,  124,  125,  126,  197,  196,  195,
      194,  127,   16,   16,   16,   16,   35,   35,   35,   35,
       45,  193,   45,   45,   60,  192,  191,   60,   62,  190,
       62,   62,   64,  189,   64,   64,   71,  188,  187,   71,
       81,   81,   81,   81,   89,   89,   89,   89,   94,   94,

       94,   94,  112,  112,  112,  112,  186,  185,  184,  183,
      182,  181,  180,  177,  176,  175,  174,  173,  172,  171,
      170,  169,  168,   71,  166,  165,  164,  163,  162,  159,
      158,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  143,  140,  139,  134,  133,  132,  131,  130,   95,
       90,  111,  110,   83,   82,   95,   71,   71,   71,   71,
       71,   90,   67,   88,   86,   85,   84,   83,   82,   47,
       80,   79,   67,   59,   58,   57,   56,   53,   47,   46,
      340,    5,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340
    } ;

static yyconst flex_int16_t yy_chk[535] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    7,    8,    8,   12,  344,    1,   12,   13,
      337,   13,   26,   26,   27,   27,   28,   31,  167,   28,
       31,   32,  336,   32,   44,   44,    1,   61,   61,    1,
        1,   37,   38,    1,  167,    1,   18,    1,   39,   18,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   39,   37,   38,   40,   37,   77,    2,
       41,   51,  100,   51,   62,   62,   64,   65,  335,   64,
       65,   68,   70,   68,   70,  334,   40,   72,    2,  100,
       77,    2,    2,   41,   76,    2,   89,    2,   89,    2,

       92,   72,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,   93,  101,   76,   88,   88,
       88,    3,  104,   92,  112,  112,  112,  122,  118,  101,
      333,  129,  104,  119,  140,  332,  140,  122,  331,   93,
        3,  207,  330,    3,    3,  118,  119,    3,  329,    3,
      129,    3,  328,  327,    3,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,  159,  207,  159,
      326,  325,  324,    4,  323,  322,  321,  320,  318,  315,
      313,  312,  310,  309,  308,  306,  305,  303,  302,  300,
      299,  297,    4,  296,  294,    4,    4,  293,  292,    4,

      291,    4,  290,    4,  287,  285,    4,    4,   35,   35,
      283,   35,  282,   35,   35,   35,  281,   35,   35,  280,
      277,  275,  273,  272,  271,  270,  268,  267,  266,  265,
      261,  260,  259,  258,  257,  256,  254,  253,  252,  251,
      247,  246,  245,  242,   35,  241,  240,  239,  238,  236,
      235,  234,  233,  232,  231,  230,  229,  227,   35,   35,
       36,   36,  223,   36,  222,   36,   36,   36,  221,   36,
       36,  220,  219,  217,  216,  215,  214,  213,  212,  211,
      210,  208,   36,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  196,  195,  194,   36,  193,  192,  191,

      190,  189,  187,  186,  185,  184,  183,  182,  181,  180,
       36,   36,   84,   84,  179,   84,   84,   84,   84,  178,
       84,  177,  176,   84,  175,   84,   84,  174,  173,   84,
       84,   84,  172,  171,  170,  169,   84,   91,   91,  166,
       91,   91,   91,   91,  165,   91,  164,  163,   91,  162,
       91,   91,  161,  160,   91,   91,   91,  158,  157,  156,
      155,   91,  341,  341,  341,  341,  342,  342,  342,  342,
      343,  154,  343,  343,  345,  153,  152,  345,  346,  151,
      346,  346,  347,  150,  347,  347,  348,  149,  148,  348,
      349,  349,  349,  349,  350,  350,  350,  350,  351,  351,

      351,  351,  352,  352,  352,  352,  147,  146,  145,  144,
      143,  142,  141,  139,  138,  137,  136,  135,  134,  133,
      132,  131,  130,  128,  127,  126,  125,  124,  123,  121,
      120,  117,  116,  115,  114,  113,  111,  109,  108,  107,
      106,  105,  103,  102,   99,   98,   97,   96,   95,   94,
       90,   86,   85,   83,   81,   80,   78,   75,   74,   73,
       71,   69,   67,   63,   58,   57,   53,   50,   49,   47,
       46,   45,   29,   22,   21,   20,   19,   17,   10,    9,
        5,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[45] =
    {   0,
0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yynfx_flex_debug;
int yynfx_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yynfxtext;
#line 1 "nfx_rules.flex"
/* nfx_rules.flex */

#define YY_NO_UNISTD_H 1
#line 12 "nfx_rules.flex"
#include <stdlib.h>
#include <Nubuck\common\common.h>
#include "nfx_local.h"
#line 733 "lex.yynfx.cpp"

#define INITIAL 0
#define IN_MULTILN_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yynfxlex_destroy (void );

int yynfxget_debug (void );

void yynfxset_debug (int debug_flag  );

YY_EXTRA_TYPE yynfxget_extra (void );

void yynfxset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yynfxget_in (void );

void yynfxset_in  (FILE * in_str  );

FILE *yynfxget_out (void );

void yynfxset_out  (FILE * out_str  );

yy_size_t yynfxget_leng (void );

char *yynfxget_text (void );

int yynfxget_lineno (void );

void yynfxset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yynfxwrap (void );
#else
extern int yynfxwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yynfxtext, yynfxleng, 1, yynfxout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yynfxin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yynfxin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yynfxin))==0 && ferror(yynfxin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yynfxin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yynfxlex (void);

#define YY_DECL int yynfxlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yynfxtext and yynfxleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 24 "nfx_rules.flex"


 /* ignore c-style comments, cnf. flex manual on conditions */
#line 920 "lex.yynfx.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yynfxin )
			yynfxin = stdin;

		if ( ! yynfxout )
			yynfxout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yynfxensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yynfx_create_buffer(yynfxin,YY_BUF_SIZE );
		}

		yynfx_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yynfxtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 341 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 482 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yynfxleng; ++yyl )
				if ( yynfxtext[yyl] == '\n' )
					   
    yynfxlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "nfx_rules.flex"
{ BEGIN(IN_MULTILN_COMMENT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "nfx_rules.flex"
/* ignore anything except '*' */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "nfx_rules.flex"
/* ignore any '*'s not followed by '/' */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "nfx_rules.flex"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 32 "nfx_rules.flex"
/* ignore c++-style comments */
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 35 "nfx_rules.flex"
/* ignore whitespace */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 37 "nfx_rules.flex"
{ return NFX_TOK_SEMICOL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 38 "nfx_rules.flex"
{ return NFX_TOK_LBRACE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 39 "nfx_rules.flex"
{ return NFX_TOK_RBRACE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 40 "nfx_rules.flex"
{ return NFX_TOK_QUOTE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 41 "nfx_rules.flex"
{ return NFX_TOK_DOT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 42 "nfx_rules.flex"
{ return NFX_TOK_EQUALS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 44 "nfx_rules.flex"
{ return NFX_TOK_FX; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 45 "nfx_rules.flex"
{ return NFX_TOK_PASS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 46 "nfx_rules.flex"
{ return NFX_TOK_VS_SRC; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 47 "nfx_rules.flex"
{ return NFX_TOK_FS_SRC; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 48 "nfx_rules.flex"
{ return NFX_TOK_GS_SRC; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 49 "nfx_rules.flex"
{ return NFX_TOK_SORTKEY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 51 "nfx_rules.flex"
{ return NFX_TOK_IDENT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 53 "nfx_rules.flex"
{ nfx_val_bool = GL_TRUE; return NFX_TOK_VAL_BOOL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 54 "nfx_rules.flex"
{ nfx_val_bool = GL_FALSE; return NFX_TOK_VAL_BOOL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "nfx_rules.flex"
{ nfx_val_int = atoi(yynfxtext); return NFX_TOK_VAL_INT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "nfx_rules.flex"
{ nfx_val_float = atof(yynfxtext); return NFX_TOK_VAL_FLOAT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 59 "nfx_rules.flex"
{ return NFX_TOK_STRING; }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 60 "nfx_rules.flex"
{ return NFX_TOK_MLSTRING; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 62 "nfx_rules.flex"
{ return NFX_TOK_UNKNOWN; }
	YY_BREAK
/* BEGIN GL ENUMS */
case 27:
YY_RULE_SETUP
#line 66 "nfx_rules.flex"
{ nfx_val_enum = GL_ALWAYS;                 return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 67 "nfx_rules.flex"
{ nfx_val_enum = GL_NEVER;                  return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 68 "nfx_rules.flex"
{ nfx_val_enum = GL_EQUAL;                  return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 69 "nfx_rules.flex"
{ nfx_val_enum = GL_NOTEQUAL;               return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 70 "nfx_rules.flex"
{ nfx_val_enum = GL_LEQUAL;                 return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 71 "nfx_rules.flex"
{ nfx_val_enum = GL_LESS;                   return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 72 "nfx_rules.flex"
{ nfx_val_enum = GL_GEQUAL;                 return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 73 "nfx_rules.flex"
{ nfx_val_enum = GL_GREATER;                return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 75 "nfx_rules.flex"
{ nfx_val_enum = GL_ONE;                    return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 76 "nfx_rules.flex"
{ nfx_val_enum = GL_ZERO;                   return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 77 "nfx_rules.flex"
{ nfx_val_enum = GL_SRC_ALPHA;              return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 78 "nfx_rules.flex"
{ nfx_val_enum = GL_ONE_MINUS_SRC_ALPHA;    return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 79 "nfx_rules.flex"
{ nfx_val_enum = GL_DST_COLOR;              return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 81 "nfx_rules.flex"
{ nfx_val_enum = GL_FRONT;                  return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 82 "nfx_rules.flex"
{ nfx_val_enum = GL_BACK;                   return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 84 "nfx_rules.flex"
{ nfx_val_enum = GL_REPLACE;                return NFX_TOK_VAL_ENUM; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 85 "nfx_rules.flex"
{ nfx_val_enum = GL_INVERT;                 return NFX_TOK_VAL_ENUM; }
	YY_BREAK
/* END GL ENUMS */
case 44:
YY_RULE_SETUP
#line 88 "nfx_rules.flex"
ECHO;
	YY_BREAK
#line 1238 "lex.yynfx.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_MULTILN_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yynfxin at a new source and called
			 * yynfxlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yynfxin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yynfxwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yynfxtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yynfxlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yynfxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yynfxrestart(yynfxin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yynfxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 341 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 341 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 340);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yynfxtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yynfxlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yynfxrestart(yynfxin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yynfxwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yynfxtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yynfxlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yynfxrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yynfxensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yynfx_create_buffer(yynfxin,YY_BUF_SIZE );
	}

	yynfx_init_buffer(YY_CURRENT_BUFFER,input_file );
	yynfx_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yynfx_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yynfxpop_buffer_state();
	 *		yynfxpush_buffer_state(new_buffer);
     */
	yynfxensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yynfx_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yynfxwrap()) processing, but the only time this flag
	 * is looked at is after yynfxwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yynfx_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yynfxin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yynfx_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yynfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yynfx_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yynfxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yynfx_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yynfx_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yynfx_create_buffer()
 * 
 */
    void yynfx_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yynfxfree((void *) b->yy_ch_buf  );

	yynfxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yynfxrestart() or at EOF.
 */
    static void yynfx_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yynfx_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yynfx_init_buffer was _probably_
     * called from yynfxrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yynfx_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yynfx_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yynfxpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yynfxensure_buffer_stack();

	/* This block is copied from yynfx_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yynfx_switch_to_buffer. */
	yynfx_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yynfxpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yynfx_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yynfx_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yynfxensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yynfxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yynfxensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yynfxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yynfxensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yynfx_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yynfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yynfx_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yynfx_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yynfxlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yynfx_scan_bytes() instead.
 */
YY_BUFFER_STATE yynfx_scan_string (yyconst char * yystr )
{
    
	return yynfx_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yynfxlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yynfx_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yynfxalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yynfx_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yynfx_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yynfx_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yynfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yynfxtext[yynfxleng] = (yy_hold_char); \
		(yy_c_buf_p) = yynfxtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yynfxleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yynfxget_lineno  (void)
{
        
    return yynfxlineno;
}

/** Get the input stream.
 * 
 */
FILE *yynfxget_in  (void)
{
        return yynfxin;
}

/** Get the output stream.
 * 
 */
FILE *yynfxget_out  (void)
{
        return yynfxout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yynfxget_leng  (void)
{
        return yynfxleng;
}

/** Get the current token.
 * 
 */

char *yynfxget_text  (void)
{
        return yynfxtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yynfxset_lineno (int  line_number )
{
    
    yynfxlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yynfx_switch_to_buffer
 */
void yynfxset_in (FILE *  in_str )
{
        yynfxin = in_str ;
}

void yynfxset_out (FILE *  out_str )
{
        yynfxout = out_str ;
}

int yynfxget_debug  (void)
{
        return yynfx_flex_debug;
}

void yynfxset_debug (int  bdebug )
{
        yynfx_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yynfxlex_destroy(), so don't allocate here.
     */

    /* We do not touch yynfxlineno unless the option is enabled. */
    yynfxlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yynfxin = stdin;
    yynfxout = stdout;
#else
    yynfxin = (FILE *) 0;
    yynfxout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yynfxlex_init()
     */
    return 0;
}

/* yynfxlex_destroy is for both reentrant and non-reentrant scanners. */
int yynfxlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yynfx_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yynfxpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yynfxfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yynfxlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yynfxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yynfxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yynfxfree (void * ptr )
{
	free( (char *) ptr );	/* see yynfxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 88 "nfx_rules.flex"



bool NFX_Parse(const char* filename, R::EffectDesc& desc) {
    yynfxin = fopen(filename, "r");
    if(!yynfxin) {
        common.printf("ERROR - unable to open file '%s'\n", filename);
        return false;
    }
    return NFX_StartParsing(filename, desc);
}

